/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package nReinas;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;

/**
 *
 * @author Haide
 */
public class GeneticoNReinas implements Runnable{
// parametros
    private int num_G;
    private double pMuta;
    private Poblacion pobActual;
    private int tamPob;
//    private Poblacion poblacionActual;
//    private Configuracion manager;

    public GeneticoNReinas(int num_G,double pMuta,int tamPob, int n){
        this.num_G = num_G;
        this.pMuta = pMuta;
        this.tamPob = tamPob;
        // generamos la poblaciÃ³n inicial como aleatoria
        this.pobActual = new Poblacion(tamPob,n);

    }

//    public GeneticoNReinas(Configuracion manager) {
//        this.manager = manager;
//        this.poblacionActual = new Poblacion(this.manager.getTamPoblacion(),this.manager.getTamGenotipo());
//        
//    }
    
    public void evolucionar(){
   int mascara [] = new int[]{1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1};
    // proceso evolutivo donde se generan nuevas poblaciones
        Individuo mejor;
        Individuo mj= null;
    // generar las itereaciones para las generaciones
    for(int g=0;g<this.num_G;g++){
        Poblacion nueva = new Poblacion();
        mejor = new Individuo(new int[31]);


        for(int i=0; i<this.tamPob;i++){
            // Proceso de selección
            Individuo madre = Seleccion.seleccionAleatoria(this.pobActual);
            Individuo padre = Seleccion.seleccionAleatoria(this.pobActual);
            // reproducimos
            Individuo hijo = Cruza.cruzaPorMascara(mascara, madre, padre);
            // mutamos 
            // evaluar la probabilidad
            
            if(Math.random()<this.pMuta){
                    Muta.aplicarMutaAleatoria(hijo);
                    // mutar por referencia al hijo
                }
            
            // agregamos el hijo generado a la nueva poblacion
            nueva.getPoblacion().add(hijo);
            if (hijo.getFitness()>mejor.getFitness()){
                    mejor = new Individuo(hijo.getGenotipo());
                     mj = new Individuo(hijo.getGenotipo());
            }
        }
        for(int y=0; y<mejor.getGenotipo().length; y++)
               System.out.print(" "+mj.getGenotipo()[y]);
        
        System.out.println("G"+g+"-"+mejor.toString());
            // actualizar la poblaciÃ³n actual 
            this.pobActual = new Poblacion(nueva);

        }
        System.out.println();
        guardarYalmacenar(mj.getGenotipo().length,mj);

    }
        
    
    public void guardarYalmacenar(int n, Individuo I){
    String t="";
    String temp ="";
    for(int i = 0;i<n; i++){
       temp= temp + I.getGenotipo()[i]+ ",";
   }
    
    
    
    
    
//    temp = temp + "Ciudades: " + n+ "\n Ci: " + ci + "\n Fitness: " + I.getFitness() +
//            "  \n Genotipo: "+ I.getGenotipo()[0]+","+I.getGenotipo()[1]+","+I.getGenotipo()[2]+","+I.getGenotipo()[3]+","+I.getGenotipo()[4]+","+I.getGenotipo()[5]+","+I.getGenotipo()[6]+","+I.getGenotipo()[7]+","+I.getGenotipo()[8]+","+I.getGenotipo()[9]+","+I.getGenotipo()[10]+","+I.getGenotipo()[11]+","+I.getGenotipo()[12]+","+I.getGenotipo()[13]+","+I.getGenotipo()[14]+","+I.getGenotipo()[15]+","+I.getGenotipo()[16]+","+I.getGenotipo()[17]+","+I.getGenotipo()[18]+","+I.getGenotipo()[19]
//            + I.getGenotipo()[20]+","+I.getGenotipo()[21]+","+I.getGenotipo()[22]+","+I.getGenotipo()[23]+","+I.getGenotipo()[24]+","+I.getGenotipo()[25]+","+I.getGenotipo()[26]+","+I.getGenotipo()[27]+","+I.getGenotipo()[28]+","+I.getGenotipo()[29]+","+I.getGenotipo()[30]+","+I.getGenotipo()[31]+","+I.getGenotipo()[32]+","+I.getGenotipo()[33]+","+I.getGenotipo()[34]+","+I.getGenotipo()[35]+","+I.getGenotipo()[36]+","+I.getGenotipo()[37]+","+I.getGenotipo()[38]+","+I.getGenotipo()[39]
//            + I.getGenotipo()[40]+","+I.getGenotipo()[41]+","+I.getGenotipo()[42]+","+I.getGenotipo()[43]+","+I.getGenotipo()[44]+","+I.getGenotipo()[45]+","+I.getGenotipo()[46]+","+I.getGenotipo()[47]+","+I.getGenotipo()[48]+","+I.getGenotipo()[49]+","+I.getGenotipo()[50]+","+I.getGenotipo()[51]+","+I.getGenotipo()[52]+","+I.getGenotipo()[53]+","+I.getGenotipo()[54]+","+I.getGenotipo()[55]+","+I.getGenotipo()[56]+","+I.getGenotipo()[57]+","+I.getGenotipo()[58]+","+I.getGenotipo()[59];
            
     t="Ciudades: " + n+ "\n Fitness: " + I.getFitness() + "  \n Genotipo: " + temp;

        File f;
        FileWriter w;
        BufferedWriter bw;
        PrintWriter wr;
         try{
        f=new File("indNReinas_1000.txt");
        w = new FileWriter(f, true);
        bw=new BufferedWriter(w);
        wr=new PrintWriter(bw);
        
        wr.write(t);
        bw.close();
        w.close();
        
        }catch(IOException e){
            e.printStackTrace();
            
        }
}
    




    @Override
    public void run() {
        evolucionar();
    }
    
    
}
